[{"content":"前言 片源的质量，很大程度上决定了观众的观看体验，以及字幕编辑时的效果，一个稳定、高效、强大的片源获取渠道就显得尤为重要了（如果对方直接给你片源的话，那没事了）。\n由于我大部分片源都来自 YouTube，因此，本文主要会围绕如何获取 YouTube 平台上的视频进行阐述，其他平台的获取方式大致相同。\n强大的视频下载工具 —— youtube-dl youtube-dl 是一个免费、开源的命令行视频下载工具，只需要一行命令就能搞定日常下载需求。\n 虽然它名叫 youtube-dl(download)，但只要是你平常见得到的视频平台，youtube-dl 几乎都支持获取上面的视频。\n 安装 安装分两步，先装 youtube-dl，再装 FFmpeg，后者可以用来更改视频封装格式或者直接重新编码。\n安装 youtube-dl  方法一 可以选择直接从 GitHub 的 Release 里下载 .exe 文件，随后找个硬盘里的风水宝地放下，并为 youtube-dl.exe 设置环境变量，搞定。  怕有人不知道怎么设置 PATH，这里提一嘴。\nWindown 10 可以直接搜索 PATH 来打开系统属性 → 环境变量 → 在 系统变量 中找到 Path → 编辑 → 新建 → 输入应用的绝对路径（例如 C:\\youtube-dl )，即可完成设置，其它方法就去问搜索引擎吧 😶。\n  方法二 如果之前有装 Python，也可以在命令行中用 pip 搞定：\npipinstallyoutube-dl#安装 pipinstall--upgradeyoutube-dl#升级 如果你是 macOS 用户，也可以这样装：\nbrewinstallyoutube-dl 其他方法详见官方文档。\n  安装完成后，在命令行工具中执行 youtube-dl ，出现以下提示即为安装成功：\nyoutube-dl Usage:youtube-dl.exe[OPTIONS]URL[URL...] youtube-dl.exe:error:YoumustprovideatleastoneURL. Typeyoutube-dl--helptoseealistofalloptions. 安装 FFmpeg 打开 FFmpeg 官网，根据需求下载对应的构建：\n\r从 FFmpeg.org 获取与系统对应的 .exe 文件\r\n\r下载构建\r\n 这里 shared 的其实是 FFmpeg 的 library，方便开发者配置编译环境，但缺点是 ffmpeg.exe 无法单独拎出来用，故不做推荐。其余的只是协议不同或者是不是基于 Vulkan，看心情选就好（\n 解压后，在 bin 文件夹里就能找到 ffmpeg.exe ，此时再为 FFmpeg 设置 PATH 即可，在 CMD 中执行 ffmpeg 验证安装结果。\n常用的 youtube-dl 命令 youtube-dl 的教程网上一抓一大把，故不在此赘述，所以我们来讲一些比较常用的命令。\n代理 最简单的方式就是启用全局代理，或者上 Clash 这类能完全接管系统代理的工具，这样就不需要在每次敲命令时都加一段 --proxy 127.0.0.1:1080 了。\n获取可用的媒体源 假设我们要下载 ツユ - 過去に囚われている MV，我们需要先看看这个视频有哪些可供下载的格式：\nyoutube-dl-F[URL] youtube-dl-Fhttps://www.youtube.com/watch?v=lGFEqEFJ410 [youtube]lGFEqEFJ410:Downloadingwebpage [info]AvailableformatsforlGFEqEFJ410: formatcodeextensionresolutionnote 249webmaudioonlytiny57k,opus@50k(48000Hz),1.45MiB 250webmaudioonlytiny75k,opus@70k(48000Hz),1.92MiB 140m4aaudioonlytiny130k,m4a_dashcontainer,mp4a.40.2@128k(44100Hz),3.56MiB 251webmaudioonlytiny147k,opus@160k(48000Hz),3.77MiB 278webm256x144144p147k,webmcontainer,vp9,24fps,videoonly,2.27MiB 394mp4256x144144p173k,av01.0.00M.08,24fps,videoonly,1.91MiB 160mp4256x144144p214k,avc1.4d400c,24fps,videoonly,2.26MiB 395mp4426x240240p279k,av01.0.00M.08,24fps,videoonly,3.49MiB 242webm426x240240p307k,vp9,24fps,videoonly,4.60MiB 133mp4426x240240p437k,avc1.4d4015,24fps,videoonly,4.50MiB 396mp4640x360360p484k,av01.0.01M.08,24fps,videoonly,7.00MiB 243webm640x360360p527k,vp9,24fps,videoonly,8.35MiB 397mp4854x480480p796k,av01.0.04M.08,24fps,videoonly,12.41MiB 134mp4640x360360p830k,avc1.4d401e,24fps,videoonly,9.40MiB 244webm854x480480p833k,vp9,24fps,videoonly,14.39MiB 135mp4854x480480p1283k,avc1.4d401e,24fps,videoonly,15.21MiB 398mp41280x720720p1305k,av01.0.05M.08,24fps,videoonly,22.60MiB 247webm1280x720720p1518k,vp9,24fps,videoonly,27.03MiB 399mp41920x10801080p2186k,av01.0.08M.08,24fps,videoonly,39.23MiB 136mp41280x720720p2331k,avc1.4d401f,24fps,videoonly,28.24MiB 248webm1920x10801080p2650k,vp9,24fps,videoonly,54.91MiB 137mp41920x10801080p4460k,avc1.640028,24fps,videoonly,79.02MiB 18mp4640x360360p651k,avc1.42001E,24fps,mp4a.40.2@96k(44100Hz),17.92MiB(best) 至于为什么要先获取可用格式列表，这都得益于 youtube-dl 的一个迷之狗屎设定。youtube-dl 在默认情况下，确实会下载最高质量的视频，但仅限于同时包含视频流和音频流的最高质量的视频。\n从上面的例子来看，只有 18 号才是 best 视频，它重新定义了最佳画质 (大嘘)。加上 youtube-dl 似乎也没有让用户重新定义 best 规则的功能，所以不能直接无脑 youtube-dl URL 来下载，只能分别选择音频和视频，最后再一起下载。\n下载   选择媒体格式 根据格式列表可知，最高质量视频的 format code 为 137 ，而最高质量的音频为 251 ，于是我们得到了一个最基础的命令：\nyoutube-dl-f\u0026#34;视频+音频\u0026#34;[URL] youtube-dl-f\u0026#34;137+251\u0026#34;https://www.youtube.com/watch?v=lGFEqEFJ410 或者有个更简单粗暴的方式，但我不确定这样写会不会在一些特殊情况下选错媒体格式：\nyoutube-dl-f\u0026#34;bestvideo+bestaudio\u0026#34;https://www.youtube.com/watch?v=lGFEqEFJ410 不过这里还有个坑，Aegisub 不能识别 opus 编码的音频流，即 format code = 249, 250, 251 。\n如果视频本身对音频质量的要求不高的话，可以直接拿 m4a 格式的音频来用，即 format code = 140 ，或者将视音频分开来下载，之后再把 opus 的音频重新编码为 aac 来使用。\n如果要单独下载音频的话，只选一个 format code 即可：\nyoutube-dl-f140https://www.youtube.com/watch?v=lGFEqEFJ410   修改视频封装格式 youtube-dl 的默认封装格式为 mkv ，如果需要的话，可以将封装格式改为 mp4 ：\nyoutube-dl-f\u0026#34;137+251\u0026#34;--merge-output-formatmp4https://www.youtube.com/watch?v=lGFEqEFJ410 封装的过程不会涉及到编码，所以如果你选择了 opus 编码的音频源，可能需要重新编码整个视频。但如果是分开来下载的话，音频转码完成之后再封装就能省下很多时间。\n  设置保存路径 youtube-dl 默认会将视频保存到 C:\\Users\\用户名 ，如果要自定义保存位置和文件名，可以带上 -o 参数：\nyoutube-dl-f\u0026#34;137+251\u0026#34;--merge-output-formatmp4-o\u0026#34;E:\\Works\\Videos\\生肉\\%(title)s.%(ext)s\u0026#34;https://www.youtube.com/watch?v=lGFEqEFJ410 更多的格式占位符及其用法详见官方文档。\n  至此，视频下载工作圆满结束，接下来我们将切入字幕制作的核心 —— Aegisub 实用技巧。\n","date":"2021-03-30T00:00:00Z","image":"https://chunk7w.github.io/p/sub-experience-01/sub-experience-01_hue93318bc092186ce612cac93b471369a_57624_120x120_fill_box_smart1_2.png","permalink":"https://chunk7w.github.io/p/sub-experience-01/","title":"如何优雅的制作硬字幕熟肉 - 01"},{"content":"很久以前就有了想要认真地来说说字幕制作的念头，但始终因为一些原因，迟迟没能动笔，也可能是因为太懒了 orz。\n最终促这篇文章，或者说这个系列诞生的是最近的一件事。\n过去 我大概做了 5 年多 Minecraft 相关视频的搬运（准确点其实算是海盗），包括现在也在持续更新。\n这 5 年来，我基本上填补了 Element Animation, ExplodingTNT 以及 Blue Monkey 在国内所有熟肉的空白，现在还负责 McHorse\u0026rsquo;s Mods 的所有视频以及模组的官方翻译。\n虽然早期有想过往功利化的方向发展，但最后不知不觉得就变成了「以尽自己所能的程度扩大原作影响力」「原作优先」的心态来做了。字幕翻译也就渐渐地就变成了一种兴趣爱好，顺带让自己的英语成绩担负起了「力挽狂澜」的责任。\n\u0026ldquo;That Case\u0026rdquo; 说了我的过去，下面就来讲讲「最近的一件事」。\n2021 年 1 月 3 日，我收到了来自 DannyCasale官方中译版 的私信，寻求合作。因为我本来就不打算接任何的商业合作，便没有搭理他。\n直到 3 月 3 日，一个刻着叔叔闪电淫纹的账号 元素动画官方账号 给我发了这样几条私信：\n 您好 我们是element animation 官方团队\n我们已经正式入驻B站 由官方团队发布未来的MC动画与翻译\n感谢您对元素账号一直以来的支持 希望您能够替我们分享官方频道\n让粉丝知道我们已经入驻了\n 经过一番搜索，Element Animation 大陆区的所有官方账号都转由 星擘文化（宁波）有限公司 运营，此前大陆官方频道疑似为优酷的 MC动画联盟。\n这件事来的很突然，意味着我在未来很长的一段时间里，都要退出 Element Animation 作品翻译的坑。\n与官号简单 「友好」 的互动过后，我原本以为这些视频会被保留，但在我陆续收到了几个稿件锁定的通知后，我知道想要留住它们是不可能的了。最终，我选择删除了所有 Element Animation 的熟肉，而不是选择看着自己曾经付出的心血一点点被蚕食。在点下最后一次删除键后，留下的便只有一地鸡毛罢了。\n启发 不论是对自己的频道，还是对原作，也许是因为自己性格的问题，说实话我都不愿意花费太多的精力来运营、推广频道。包括签署授权协议带给我的「责任感」，也会在无形中给我带来压力，或者干脆就怪我社交能力太弱，没去找几位原作者谈授权的事吧……\n所以在可预见的未来，同样的事也可能会继续上演，除非我能够违背自己的意愿，让这一切来的晚一些。\n庆幸的是，我了解到身边有很多出色的作者，尤其是仍然坚守在 Minecraft 这个游戏中的作者的青春，有属于它们的位置。也许是为他们带来了一时的快乐，又或者是脑中的灵光一现，我也不清楚，但我想我能做的还不止这些。\n因此，借着最近折腾静态博客这一契机，我决定将我的字幕工作流程毫无保留的分享出来，希望能在我退出以后，能为其他人留下点什么。\n更新进度 全部写完可能需要一些时间，但应该不会太久。\n 0 - 执笔的契机 1 - 获取高质量的视频资源 2 - Aegisub 实用技巧 3 - 提升观看体验 4- 我的字幕工作流 5 - 压制技巧 还没想好  ","date":"2021-03-27T00:00:00Z","image":"https://chunk7w.github.io/p/sub-experience-00/sub-experience-00_hu18dddd796e29351b5eb8229ead349619_61520_120x120_fill_box_smart1_2.png","permalink":"https://chunk7w.github.io/p/sub-experience-00/","title":"如何优雅的制作硬字幕熟肉 - 00"},{"content":"Hello, World!\n","date":"2021-03-26T00:00:00Z","permalink":"https://chunk7w.github.io/p/hello-world/","title":"Hello, World"}]